{"version":3,"sources":["components/Cell.js","library/BoardInit.js","reducers/Reducers.js","reducers/Actions.js","components/CellContainer.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","open","content","onLeftClick","onRightClick","style","width","height","margin","color","fontSize","size","type","onClick","disabled","onContextMenu","React","memo","initBoard","mineCount","copied","Array","fill","map","_","x","shuffle","boardData","length","chosen","splice","Math","floor","random","push","i","row","y","countMine","count","toString","console","log","expandCell","board","opened","Search","level","parseInt","aroundPoint","concat","forEach","OPEN_CELL","FLAG_CELL","GAME_LOST","RESTART","WIDTH","HEIGHT","MINE_COUNT","INC_TIMER","RESET_TIMER","initialState","timer","lost","win","flagNum","counter","from","flagged","restart","resetTimer","CellContainer","dispatch","useDispatch","OpenState","useSelector","state","FlagState","Content","useCallback","payload","openCell","evt","preventDefault","flagCell","getContent","Board","useState","lostAlert","winAlert","lostText","winText","title","visible","onOk","onCancel","className","App","lostState","winState","flagCountState","useEffect","interval","clearInterval","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","openCopied","flaggedCopied","winner","loster","flagCount","board_Restart","opened_Restart","flagged_Restart","incrementTimer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0688583f.chunk.js","sourcesContent":["import React from 'react';\nimport {Button} from 'antd';\nconst Cell = ({open, content, onLeftClick, onRightClick}) => {\n    return (\n        <Button style = {{ width:'30px', height:'30px', margin:'2px', color:'black', fontSize:'15px'}} \n                size = 'small' \n                type = 'primary' \n                onClick = {onLeftClick} \n                disabled = {open}\n                onContextMenu = {onRightClick}> \n        {content}\n        </Button>\n    )\n}\n\nexport default  React.memo(Cell);\n","export const initBoard = ( width, height, mineCount)=>{\n    const copied    = Array( width * height ).fill().map((_,x) => x);\n    const shuffle   = [];\n    const boardData = []; \n    \n    //폭탄 심을 자리 정하기 \n    while (copied.length > (width * height) - mineCount){ \n        const chosen = copied.splice(Math.floor(Math.random() * copied.length),1)[0];\n        // 한칸짜리 배열을 출력한 곳의 첫번째 값\n        shuffle.push(chosen);\n    }// 0< Math.random() * copied.length <copied.length인 랜덤한 숫자를 출력 \n\n    //보드 만들기\n    for(let i=0; i<height; i++){\n        const row = Array(width).fill(' ');\n        boardData.push(row);\n    } // 배열의 길이가 width인 행을 만들고 height번 반복해서 ' '로 채운다. \n    \n    //폭탄 심기 \n    for(let i=0; i<shuffle.length; i++){\n        const x = shuffle[i] % width;\n        const y = Math.floor(shuffle[i] / width);\n        boardData[x][y] = '💣'; \n    }\n\n\n    const countMine = (x,y) => { \n        if (x<0 | y<0 | x>=height | y>=width){\n            return 0; // 배열 아닌 곳은 0\n        }\n        \n        if(boardData[x][y] === '💣'){\n            return 1; // 지뢰는 1\n        }\n\n        return 0; // 나머지는 0 \n    }\n\n    //지뢰 갯수 세기 \n    for(let x=0; x < height; x++){\n        for (let y=0; y < width; y++){\n            if (boardData[x][y] === ' '){\n                let count = 0;\n                count += countMine(x-1,y-1);\n                count += countMine(x-1,y);\n                count += countMine(x-1,y+1);\n\n                count += countMine(x,y-1);\n                count += countMine(x,y+1);\n\n                count += countMine(x+1,y-1);\n                count += countMine(x+1,y);\n                count += countMine(x+1,y+1);// 자신빼고 8방향\n                if(count !== 0){\n                    boardData[x][y] = count.toString();\n                } // 근처에 지뢰가 있는 셀은 근처의 지뢰 갯수를 count값으로 갖는다. \n            }\n        }\n    }\n    console.log(boardData)\n    return boardData;\n}\n\n//확장하기 \nexport const expandCell = (board,opened, x, y, width, height) => {\n\n    //찾기\n\tconst Search = (x, y, level = 0) => {\n        x = parseInt(x)\n        y = parseInt(y) // string to Integer Number\n\n        // 1. 확장단계 \n        if (level > 10){\n            return;\n        }\n        // 2. 배열이 아닌 곳은 open에 추가되지 않음 \n        if(x<0 | y<0 | x>width-1 | y>height-1){\n            return;\n        }\n        // 3. 근처에 지뢰가 있는 곳은 open되지 않는다. \n\t\tif (board[x][y] === '💣') {\n\t\t\treturn;\n\t\t}\n       \n        // 4. 주변의 셀들을 합쳐서 하나의 배열로 만든다.  \n\t\tlet aroundPoint = [];\n\t\taroundPoint = aroundPoint.concat({ x: x - 1, y: y - 1 }, { x, y: y - 1 },{ x: x + 1, y: y - 1 });\n\t\taroundPoint = aroundPoint.concat({ x: x + 1, y }, { x: x - 1, y: y + 1 },{ x: x - 1, y });\n\t\taroundPoint = aroundPoint.concat({ x, y: y + 1 }, { x: x + 1, y: y + 1 }); \n        \n        // 5. 만약 셀이 갖는 값이 없으면 다시 찾기 \n\t\tif (board[x][y] === ' ' ) {\n\t\t\taroundPoint.forEach((i) => {\n\t\t\t\tSearch(i.x, i.y, level+1);\n\t\t\t});\n        }\n        // 6. 1,2,3 통과하면 open배열에 추가 \n        opened[x][y] = true; \n\t};\n\n\tSearch(parseInt(x), parseInt(y));\n\n\treturn opened;\n};","import {initBoard,expandCell} from '../library/BoardInit';\n\nexport const OPEN_CELL  = 'OPEN_CELL';\nexport const FLAG_CELL  = 'FLAG_CELL';\nexport const GAME_LOST  = 'GAME_LOST';\nexport const RESTART    = 'RESTART';\nexport const WIDTH      = 12;\nexport const HEIGHT     = 12;\nexport const MINE_COUNT = 30;\nexport const INC_TIMER  = 'INC_TIMER'\nexport const RESET_TIMER  = 'RESET_TIMER'\n\nconst initialState = {\n    board   : initBoard(WIDTH, HEIGHT, MINE_COUNT), \n    timer   : 0,   \n    lost    : false,\n    win     : false,\n    flagNum : 50,\n    counter : 0,\n    opened  : Array.from( {length : HEIGHT}, () => Array.from({length : WIDTH}, () => false) ),\n    flagged : Array.from( {length : HEIGHT}, () => Array.from({length : WIDTH}, () => false) ),\n} // 행길이 HEIGHT만큼의 배열들을 만들고 각각의 배열들은 WIDTH의 길이의 값들을 갖고 값들은 모두 FALSE \n\nexport const boardReducer = ( state = initialState, action ) => {\n    switch(action.type){\n        case OPEN_CELL: // 눌렀을때 빈칸인 경우에만 확장시작\n            let openCopied = [...state.opened] \n            openCopied[action.payload.x][action.payload.y] = true\n\n            if( state.board[action.payload.x][action.payload.y] === ' ' ){ //선택한 칸이 빈칸일때\n                openCopied = expandCell(state.board, state.opened, action.payload.x, action.payload.y, WIDTH, HEIGHT)\n            } // 확장시작 \n            return {...state, opened:openCopied}\n\n        case FLAG_CELL: //깃발을 지뢰에 모두 박았을때 승리조건, 깃발을 모두 사용하면 패배조건 \n            const flaggedCopied = [...state.flagged];\n            let mineCount = state.counter;\n            let winner = false;\n            let loster = false; \n            let flagCount = state.flagNum;\n\n            flaggedCopied[action.payload.x][action.payload.y] = true;\n            if(state.board[action.payload.x][action.payload.y]==='💣'){//깃발꽂은 곳이 지뢰인 경우 +1 \n                mineCount += 1;\n                if (mineCount === MINE_COUNT){\n                    winner = true;\n                    console.log(state.board)\n                }\n            }\n\n            if(state.flagNum===0){\n                loster = true;\n            }// 깃발을 모두 사용하면 패배조건.\n\n            return {...state, flagged : flaggedCopied, counter: mineCount, lost:loster, win:winner, flagNum:flagCount-1}\n\n        case GAME_LOST: //눌렀을 때 지뢰면 패배함 \n            return {...state,lost:true, timer : 0};\n\n        case RESTART: \n            const board_Restart = initBoard(WIDTH, HEIGHT, MINE_COUNT);\n            const opened_Restart  = Array.from( {length : HEIGHT}, () => Array.from({length : WIDTH}, () => false) );\n            const flagged_Restart  = Array.from( {length : HEIGHT}, () => Array.from({length : WIDTH}, () => false) );\n            return {...state, \n                board:board_Restart, opened:opened_Restart, \n                flagged:flagged_Restart, lost:false, \n                win:false, counter:0, flagNum : 50,\n                timer : 0\n            };\n        \n        case INC_TIMER:\n            const incrementTimer = state.timer + 1;\n\n            return {...state, timer : incrementTimer }; \n        \n        case RESET_TIMER:\n            return {...state, timer : 0 }; \n\n        default:\n            return state;\n    }\n}","import {OPEN_CELL,FLAG_CELL,GAME_LOST,RESTART,INC_TIMER, RESET_TIMER} from './Reducers';\n\nexport const openCell = (x,y) => ({\n    type : OPEN_CELL,\n    payload : {x,y}\n});\n\nexport const flagCell = (x,y) => ({\n    type : FLAG_CELL,\n    payload : {x,y}\n});\n\nexport const lost = () => ({\n    type : GAME_LOST\n});\n\nexport const restart = () => ({\n    type : RESTART\n});\n\nexport const incrementTimer = () => ({\n    type : INC_TIMER\n});\n\nexport const resetTimer = () => ({\n    type : RESET_TIMER\n});","import React, { useCallback } from 'react';\nimport { useDispatch,useSelector } from 'react-redux';\nimport Cell from './Cell';\nimport { openCell, flagCell, lost } from '../reducers/Actions';\n\nconst CellContainer = ({x,y}) => {\n    const dispatch  = useDispatch();\n    const OpenState = useSelector( state => state.opened[x][y] )  // 오픈인지 \n    const FlagState = useSelector( state => state.flagged[x][y] ) // 깃발인지 \n    const Content   = useSelector( state => state.board[x][y] )   // 폭탄인지 깃발인지 \n\n    const onLeftClick = useCallback( () => {\n        if(!OpenState){\n            dispatch(openCell(x, y))\n        }; \n        // 왼쪽클릭했을때 open된 상태가 아니면(false) 오픈된 상태로 만든다. \n    }, [OpenState, x, y, dispatch] );\n\n    const onRightClick = useCallback( (evt) => {\n        evt.preventDefault();\n\n        if(!FlagState){\n        dispatch(flagCell(x, y))}; \n        // 오른쪽 클릭했을 때, 깃발꽂기 \n\n    }, [FlagState, x, y, dispatch] );\n\n    const getContent = useCallback ( (content) => {\n        if(OpenState){ //오픈된 상태일 때, \n            if(content==='💣'){\n                dispatch(lost());\n                return '💥'; // 폭탄이면 뻥 \n            }\n            return content;\n        }else{             // 오픈 아닐때 \n            if(FlagState){ //깃발인 상태이면 깃발을 추가\n                return '🚩';\n            }else{\n                return ' ';\n            }\n        }\n    }, [FlagState, OpenState, dispatch] );\n\n    return (\n        <>\n            <Cell   \n                open         = {OpenState} \n                content      = {getContent(Content)}\n                onLeftClick  = {onLeftClick} \n                onRightClick = {onRightClick} \n            />\n        </>\n    )\n}\n\nexport default React.memo(CellContainer);\n","import React, { useState } from 'react';\nimport { useDispatch,useSelector } from 'react-redux';\nimport CellContainer from './CellContainer';\nimport { Modal } from 'antd';\nimport './Board.css';\nimport { restart, resetTimer } from '../reducers/Actions';\nimport {WIDTH, HEIGHT} from '../reducers/Reducers';\n\nconst Board = () => {\n  const [width, setWidth] = useState(WIDTH); \n  const [height, setHeight] = useState(HEIGHT); \n  const dispatch = useDispatch();\n\n  const lostAlert = useSelector( state => state.lost);\n  const winAlert  = useSelector( state => state.win);\n\n  const [lostText, setAlertText] = useState('패배하였습니다.');\n  const [winText, setWinText] = useState('승리하였습니다.');\n\n  const onClick = () => {\n    dispatch(resetTimer())    \n    dispatch(restart())\n  };\n    \n  return (\n    <>\n      <Modal title=\"GAME LOST\" visible={lostAlert} onOk={onClick} onCancel={onClick}>\n      {lostText}\n      </Modal>\n\n      <Modal title=\"GAME WIN\" visible={winAlert} onOk={onClick} onCancel={onClick}>\n      {winText}\n      </Modal>\n\n      <div className = \"form\">\n          { Array( width * height ).fill().map( (x,y) =>\n            <CellContainer key = {y} x = {y % width} y = {Math.floor( y / width )}/>)\n          }\n      </div>\n    </>\n  )\n}\n\nexport default React.memo(Board);\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport { MINE_COUNT } from './reducers/Reducers'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { restart } from './reducers/Actions';\nimport { useEffect } from 'react';\nimport { incrementTimer, resetTimer } from './reducers/Actions';\n\nfunction App() {\n  const dispatch  = useDispatch();\n  const lostState = useSelector( state => state.lost )\n  const winState = useSelector( state => state.win ) \n  const flagCountState = useSelector( state => state.flagNum )  \n  const timer = useSelector( state => state.timer )\n\n  //타이머 \n  useEffect ( () => {\n    let interval = null; \n    if ( winState === false || lostState === false ){\n      clearInterval(interval);\n      interval = setInterval(() => {\n        dispatch(incrementTimer());\n      }, 1000)\n    }\n\n    if ( winState === true || lostState === true ){\n      return resetTimer(); \n    }\n\n    return () => {\n      clearInterval(interval);\n    }\n  }, []); \n\n  const onClickButton = () => {\n    dispatch(resetTimer())    \n    dispatch(restart())\n  };\n\n  return (\n    <div className=\"Form_maker\">\n        <div className=\"size_title1\">MINESWEEPER</div>\n        <button className =\"btn btn-primary\" onClick={onClickButton}>Restart</button><br/>\n        <div className=\"size_title3\">{timer}</div>\n        <div className=\"size_title2\">{MINE_COUNT}💣</div>\n        <div className=\"size_title4\">{flagCountState}🚩</div>\n        <Board/>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {boardReducer} from './reducers/Reducers';\n\nconst store = createStore(boardReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}